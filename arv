#include <stdlib.h>
#include <stdio.h>

typedef struct NoArv{
    struct  NoArv* esquerda;
    int info;
    struct NoArv* direita;
}NoArv;

typedef struct{
    NoArv* raiz;
}Arv;

Arv* criarArvore(){
    Arv* a = (Arv*) malloc(sizeof(Arv));
    a->raiz = NULL;
    return a;
}

int vaziaArvore(Arv* a){
    return (a->raiz == NULL);
}

Arv* inseririArvore(Arv* a, NoArv* n){
    if(vaziaArvore(a)){
        a->raiz = n;
    }else{
        // percorrer a arvore
        NoArv* monkey = a->raiz;
        int flag = 0;
        while(flag == 0){
            // se o valor do no for menor que o valor do no atual
            if(n->info < monkey->info){
                // se o no da esquerda for nulo, insere o no
                if(monkey->esquerda == NULL){
                    monkey->esquerda = n;
                    flag = 1;
                }else{
                    // se nao, continua percorrendo a arvore
                    monkey = monkey->esquerda;
                }
            // se o valor do no for maior que o valor do no atual
            }else{
                // se o no da direita for nulo, insere o no
                if(monkey->direita == NULL){
                    monkey->direita = n;
                    flag = 1;
                }else{
                    // se nao, continua percorrendo a arvore
                    monkey = monkey->direita;
                }
            }
        }
    }
    // retorna a arvore
    return a;
}

NoArv* criarNo(int info){
    NoArv* n = (NoArv*) malloc(sizeof(NoArv));
    n->info = info;
    n->esquerda = NULL;
    n->direita = NULL;
    return n;
}

int buscarArvore(Arv* a, int info){
    // percorrer a arvore. se encontrar, retorna 1, se nao encontrar, retorna 0
    if(vaziaArvore(a)){
        return 0;
    }else{
        NoArv* monkey = a->raiz;
        int flag = 0;
        while(!flag){
            if(info == monkey->info){
                return 1;
            }else if(info < monkey->info){
                // se o no da esquerda for nulo, retorna 0
                if(monkey->esquerda == NULL){
                    return 0;
                }else{
                    monkey = monkey->esquerda;
                }
            }else{
                // se o no da direita for nulo, retorna 0
                if(monkey->direita == NULL){
                    return 0;
                }else{
                    monkey = monkey->direita;
                }
            }
        }
    }
}

void imprimirArvorePre(NoArv* n){
    if(n != NULL){
        printf("%d ", n->info);
        imprimirArvorePre(n->esquerda);
        imprimirArvorePre(n->direita);
    }
}

void imprimirArvoreIn(NoArv* n){
    if(n != NULL){
        imprimirArvoreIn(n->esquerda);
        printf("%d ", n->info);
        imprimirArvoreIn(n->direita);
    }
}

void imprimirArvorePos(NoArv* n){
    if(n != NULL){
        imprimirArvorePos(n->esquerda);
        imprimirArvorePos(n->direita);
        printf("%d ", n->info);
    }
}

int qntdNosInternosArvore(NoArv* n){
    if(n->esquerda != NULL && n->direita != NULL){
        qntd = 1;    
    }
    if(n->esquerda != NULL){
        qntd += qntdNosInternosArvore(n->esquerda);
    }
    if(n->direita != NULL){
        qntd += qntdNosInternosArvore(n->direita);
    }
}

int main(){
    Arv* a = criarArvore();
    NoArv* n = criarNo(10);
    a = inseririArvore(a, n);
    n = criarNo(5);
    a = inseririArvore(a, n);
    n = criarNo(15);
    a = inseririArvore(a, n);
    n = criarNo(20);
    a = inseririArvore(a, n);
    n = criarNo(12);
    a = inseririArvore(a, n);
    n = criarNo(3);
    a = inseririArvore(a, n);
    n = criarNo(7);
    a = inseririArvore(a, n);
    printf("\n---------------- Pre-Order----------------\n");
    imprimirArvorePre(a->raiz);
    printf("\n---------------- In-Order----------------\n");
    imprimirArvoreIn(a->raiz);
    printf("\n---------------- Pos-Order----------------\n");
    imprimirArvorePos(a->raiz);


    return 0;
}
